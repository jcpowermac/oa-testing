---
- name: Create machineset_name
  set_fact:
    machineset_name: "{{ item.metadata.name ~ '-' ~ platform_type }}"

- name: Update machineset definition
  set_fact:
    machineset: "{{ item | combine(dict_edit, recursive=True) }}"
  vars:
    dict_edit:
      metadata:
        name: "{{ machineset_name }}"
        resourceVersion: ""
      spec:
        selector:
          matchLabels:
            machine.openshift.io/cluster-api-machineset: "{{ machineset_name }}"
        template:
          metadata:
            labels:
              machine.openshift.io/cluster-api-machineset: "{{ machineset_name }}"
          spec:
            providerSpec:
              value:
                ami:
                  id: "{{ aws_ami }}"
                keyName: "openshift-dev"

- name: Import machineset definition
  command: >
    oc apply -f -
    --config={{ kubeconfig_path }}
  register: oc_apply
  args:
    stdin: "{{ machineset | to_yaml }}"
  changed_when:
  - ('created' in oc_apply.stdout) or
    ('configured' in oc_apply.stdout)

- name: Wait for machine to be created
  command: >
    oc get machine
    --config={{ kubeconfig_path }}
    --selector='machine.openshift.io/cluster-api-machineset={{ machineset_name }}'
    --namespace=openshift-machine-api
    --output=json
  register: new_machine
  until:
  - new_machine.stdout != ''
  - (new_machine.stdout | from_json)['items'] | length > 0
  - (new_machine.stdout | from_json)['items'][0].status is defined
  - (new_machine.stdout | from_json)['items'][0].status.providerStatus is defined
  - (new_machine.stdout | from_json)['items'][0].status.providerStatus.instanceState is defined
  - (new_machine.stdout | from_json)['items'][0].status.providerStatus.instanceState == 'running'
  retries: 36
  delay: 5
  changed_when: false

- name: Add hostname to new_workers_list
  set_fact:
    new_workers_list: "{{ new_workers_list + [ (new_machine.stdout | from_json)['items'][0].status.addresses | selectattr('type', 'match', '^InternalDNS$') | map(attribute='address') | first ] }}"
