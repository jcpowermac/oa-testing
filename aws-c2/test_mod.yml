---
- name: Test Playbook
  # hosts: localhost
  # connection: local
  hosts: masters[0]
  gather_facts: no
  vars:
    # openshift_deployment_type: "{{ deployment_type }}"
    # openshift_hosted_kubeconfig: "/etc/origin/master/admin.kubeconfig"
    # openshift:
    #   common:
    #     client_binary: "oc"
    # openshift:
    #   hosted:
    #     router:
    #       selector: "region=infra"
    #       replicas: 1
    # openshift_hosted_registry_namespace: default
    # openshift_hosted_router_registryurl: "openshift3/ose-${component}:${version}"
    # openshift_hosted_registry_registryurl: "openshift3/ose-${component}:${version}"
    # openshift_hosted_registry_name: docker-registry
    # openshift_hosted_registry_namespace: default
    # openshift_hosted_registry_selector: region=infra
    db_templates_base: /usr/share/openshift/examples/db-templates
    db_templates:
      - name: mariadb-persistent
        template: "{{ db_templates_base }}/mariadb-persistent-template.json"
    test_string: "/usr/share/openshift/examples/db-templates/mariadb-persistent-template.json"

  roles:
    - lib_openshift

  tasks:
    # - debug:
    #     msg: "{{ test_string.split('/')[-1].split('-template')[0] }}: {{ test_string }}"

    - name: Gather db template list
      find:
        paths: "{{ db_templates_base }}"
        patterns: "*.json"
      register: template_list

    # - debug:
    #     msg: "{{ item | basename.split('-')[0] }}: {{ item }}"
    #   with_items: "{{ template_list.files | map(attribute='path') | list }}"

    - name: Import db templates
      oc_obj:
        kind: template
        namespace: openshift
        name: "{{ item.split('/')[-1].split('-template')[0] }}"
        files: "{{ item }}"
      with_items: "{{ template_list.files | map(attribute='path') | list }}"

    # - name: Remove defunct quickstart templates from openshift namespace
    #   oc_obj:
    #     kind: template
    #     namespace: openshift
    #     name: "{{ item }}"
    #     state: absent
    #   with_items:
    #     - nodejs-example
    #     - cakephp-example
    #     - dancer-example
    #     - django-example

    # - name: Set additional permissions for registry
    #   command: >
    #     {{ openshift.common.client_binary }} adm policy --config={{ openshift_hosted_kubeconfig }}
    #     add-cluster-role-to-user system:registry system:serviceaccount:default:registry
    #   register: policy_output
    #   failed_when:
    #     - policy_output.rc == 1
    #     - "'exists' not in policy_output.stderr"
    #
    # - debug:
    #     var: policy_output




# - name: Test Playbook
#   hosts: masters[0]
#   vars:
#     openshift_deployment_type: "{{ deployment_type }}"
#   roles:
#     - openshift_hosted
#   tasks:




# - name: Test Playbook
#   hosts: masters[0]
#   # hosts: localhost
#   # connection: local
#   # hosts: nodes
#   # gather_facts: no
#   vars:
#     openshift_deployment_type: "{{ deployment_type }}"
#     # openshift:
#     #   hosted:
#     #     router:
#     #       selector: "region=infra"
#     #       replicas: 1
#     # openshift_hosted_registry_namespace: default
#     # openshift_hosted_router_registryurl: "openshift3/ose-${component}:${version}"
#     # openshift_hosted_registry_registryurl: "openshift3/ose-${component}:${version}"
#     # openshift_hosted_registry_name: docker-registry
#     # openshift_hosted_registry_namespace: default
#     # openshift_hosted_registry_selector: region=infra
#
#   roles:
#   # - lib_openshift
#     - openshift_hosted
#
#   tasks:
    # - name: create the default registry service
    #   oc_service:
    #     namespace: "{{ openshift_hosted_registry_namespace }}"
    #     name: "{{ openshift_hosted_registry_name }}"
    #     ports:
    #     - name: 5000-tcp
    #       port: 5000
    #       protocol: TCP
    #       targetPort: 5000
    #     selector: "{{ openshift_hosted_registry_selector }}"
    #     session_affinity: ClientIP
    #     service_type: ClusterIP

    # - name: Retrieve list of openshift nodes matching router selector
    #   oc_obj:
    #     state: list
    #     kind: node
    #     namespace: "{{ openshift.hosted.router.namespace | default('default') }}"
    #     selector: "{{ openshift.hosted.router.selector | default(omit) }}"
    #   register: router_nodes
    #   when: openshift.hosted.router.replicas | default(none) is none
    #
    # - name: set_fact replicas
    #   set_fact:
    #     replicas: "{{ openshift.hosted.router.replicas | default(router_nodes.results.results[0]['items'] | length) }}"
    #
    # - debug:
    #     var: replicas
    #
    # - name: Set fact docker_registry_route_hostname
    #   set_fact:
    #     docker_registry_route_hostname: "{{ 'docker-registry-default.' ~ (openshift_master_default_subdomain | default('router.default.svc.cluster.local', true)) }}"
    #
    # - name: Create passthrough route for docker-registry
    #   oc_route:
    #     state: present
    #     name: docker-registry
    #     namespace: "{{ openshift_hosted_registry_namespace }}"
    #     service_name: docker-registry
    #     tls_termination: passthrough
    #     host: "{{ docker_registry_route_hostname }}"
    #
    # - name: Retrieve registry service IP
    #   oc_service:
    #     namespace: "{{ openshift_hosted_registry_namespace }}"
    #     name: docker-registry
    #     state: list
    #   register: docker_registry_service_ip

    # - name: If cloudfront is being used, fail if we don't have all the required variables
    #   assert:
    #     that:
    #       - "openshift_hosted_registry_storage_s3_cloudfront_privatekeyfile | default(none) is not none"
    #       - "openshift_hosted_registry_storage_s3_cloudfront_keypairid | default(none) is not none"
    #     msg: |
    #       When openshift_hosted_registry_storage_s3_cloudfront_baseurl is provided
    #         openshift_hosted_registry_storage_s3_cloudfront_keypairid and
    #         openshift_hosted_registry_storage_s3_cloudfront_privatekeyfile are required
    #   when: openshift_hosted_registry_storage_s3_cloudfront_baseurl is defined


  # - name: Set facts for persistent volume
  #   set_fact:
  #     pvc_volume_mounts:
  #     - name: registry-storage
  #       type: persistentVolumeClaim
  #       claim_name: "{{ openshift.hosted.registry.storage.volume.name }}-claim"
  #
  # - debug:
  #     var: pvc_volume_mounts
  #
  # - name: Set facts for secure registry
  #   set_fact:
  #     secure_volume_mounts:
  #     - path: /etc/secrets
  #       type: secret
  #       secret_name: registry-certificates

  # - name: Set facts for registry object storage
  #   set_fact:
  #     obj_storage_volume_mounts:
  #     - name: docker-config
  #       path: /etc/secrets
  #       type: secret
  #       secret_name: "{{ registry_config_secret_name }}"

  # - set_fact:
  #     volume_mounts: "{{ secure_volume_mounts|default([]) + obj_storage_volume_mounts|default([]) + pvc_volume_mounts|default([]) }}"
  #
  # - debug:
  #     var: volume_mounts

    # oc_adm_registry:
    #   name: docker-registry
    #   namespace: "{{ openshift.hosted.registry.namespace | default('default') }}"
    #   selector: "{{ openshift.hosted.registry.selector }}"
    #   replicas: "{{ replicas }}"
    #   service_account: registry
    #   images: "{{ openshift.hosted.registry.registryurl }}"
    #   env_vars: {}
    #   edits: []
      # env_vars:
      #   REGISTRY_CONFIGURATION_PATH: /etc/registry/config.yml
      # edits:
      # - key: spec.template.spec.containers[0].livenessProbe.httpGet.scheme
      #   value: HTTPS
      #   action: put
      # - key: spec.template.spec.containers[0].readinessProbe.httpGet.scheme
      #   value: HTTPS
      #   action: put

    # when: replicas | int > 0


    #
    # - debug:
    #     msg: |
    #        oc_adm_router:
    #          name: "{{ openshift.hosted.router.name | default('router') }}"
    #          replicas: "{{ replicas }}"
    #          namespace: "{{ openshift.hosted.router.namespace | default('default') }}"
    #          # force_subdomain: "{{ openshift.hosted.router.force_subdomain | default(none) }}"
    #          service_account: router
    #          selector: "{{ openshift.hosted.router.selector | default(none) }}"
    #          images: "{{ openshift.hosted.router.registryurl | default(none) }}"
    #          default_cert: "{{ openshift_master_config_dir + '/openshift-router.pem' | default(omit) }}"
    #          edits:
    #          - key: spec.strategy.rollingParams.intervalSeconds
    #            value: 1
    #            action: put
    #          - key: spec.strategy.rollingParams.updatePeriodSeconds
    #            value: 1
    #            action: put

  # - name: oc_obj list
  #   oc_obj:
  #     state: list
  #     kind: nodes
  #     namespace: default
  #   register: obj_list

  # - name: Debug obj_list
  #   debug:
  #     var: obj_list.results.results[0]['items'] | length

  # - name: oc_service list
  #   oc_service:
  #     namespace: default
  #     name: docker-registry
  #     state: list
  #   register: service_list
  #
  # - name: Debug service_list
  #   debug:
  #     var: service_list

  # - name: Wait for Node Registration
  #   oc_obj:
  #     name: "{{ hostvars[groups.nodes.1].openshift_hostname }}"
  #     kind: node
  #     state: list
  #   register: get_node
  #   until: "'metadata' in get_node.results.results[0]"
  #   retries: 50
  #   delay: 5
  #   # when: "'nodename' in openshift.node"
  #   # delegate_to: "{{ groups.masters[0] }}"
  #
  # - name: Set node schedulability
  #   oadm_manage_node:
  #     node: "{{ hostvars[groups.nodes.1].openshift_hostname }}"
  #     # schedulable: "{{ 'true' if openshift.node.schedulable | bool else 'false' }}"
  #     schedulable: 'true'
  #   retries: 10
  #   delay: 5
  #   register: node_schedulable
  #   until: node_schedulable|succeeded
  #   # when: "'nodename' in openshift.node"
  #   # delegate_to: "{{ openshift_master_host }}"
  #
  # - name: Debug obj_list
  #   debug:
  #     var: obj_list.results.results[0]
  #
  # - name: Debug first node
  #   debug:
  #     var: hostvars[groups.nodes.1].openshift_hostname
  #
  # - name: Debug test
  #   debug:
  #     var: "'metadata-foo' in obj_list.results.results[0]"
  #     # var: obj_list.results.results[0].status.conditions
  #     # var: obj_list | json_query("results.results[0].status.conditions[?type=='Ready'].status") | join() | bool == True
  #     var: obj_list.results.results[0].status.conditions | selectattr('type', 'equalto', 'Ready') | map(attribute='status') | join | bool == True
  #     # var: "{{ obj_list.results.results[0]['items'] | map(attribute='metadata') | map(attribute='name') | list }}"

  # - name: Debug openshift.node
  #   debug:
  #     var: openshift.node
  #
  # - name: Debug 'nodename' in openshift.node
  #   debug:
  #     var: "'nodename' in openshift.node"
  #
  # - name: Debug 'labels' in openshift.node
  #   debug:
  #     var: "'labels' in openshift.node"
  #
  # - name: Debug openshift.node.labels != {}
  #   debug:
  #     var: openshift.node.labels != {}
  #
  # - name: Debug openshift.node.labels | oo_combine_dict | oo_split(separator=' ')
  #   debug:
  #     var: openshift.node.labels | oo_combine_dict | oo_split(separator=' ')

  #   oadm_manage_node:
  #     node: ip-172-18-3-24.ec2.internal
  #     schedulable: False
  #   delegate_to: ec2-52-23-255-32.compute-1.amazonaws.com
    # retries: 10
    # delay: 5
    # register: node_unschedulable
    # until: node_unschedulable|succeeded

  # - name: Check if iptables is running
  #   command: systemctl status firewalld
  #   ignore_errors: true
  #   changed_when: false
  #   register: service_iptables_status
  #
  # - name: Set fact os_firewall_use_firewalld FALSE for iptables
  #   set_fact:
  #     os_firewall_use_firewalld: false
  #   when: "'running' in service_iptables_status.stdout"
  #
  # - debug:
  #     var: os_firewall_use_firewalld
